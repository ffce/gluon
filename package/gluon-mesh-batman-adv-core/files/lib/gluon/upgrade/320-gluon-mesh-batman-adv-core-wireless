#!/usr/bin/lua

local site = require 'gluon.site_config'
local util = require 'gluon.util'

local uci = require('luci.model.uci').cursor()


local function configure_radio(radio, index, config)
  uci:delete('wireless', radio, 'disabled')

  uci:set('wireless', radio, 'channel', config.channel)
  uci:set('wireless', radio, 'htmode', config.htmode)
  uci:set('wireless', radio, 'country', site.regdom)

  local client = 'client_' .. radio
  local disable_state_client = false

  if uci:get('wireless', client) then
    disable_state_client = uci:get_bool('wireless', client, "disabled")
  elseif config.client_disabled then
    disable_state_client = true
  end

  local mesh = 'mesh_' .. radio
  local disable_state_mesh = false
  local mesh_enc = config.mesh_enc
  local mesh_psk = mesh_enc and config.mesh_psk

  if uci:get('wireless', mesh) then
    disable_state_mesh = uci:get_bool('wireless', mesh, "disabled")
    mesh_enc = uci:get('wireless', mesh, "encryption") or mesh_enc
    mesh_psk = uci:get('wireless', mesh, "key") or mesh_psk
  elseif config.mesh_disabled then
    disable_state_mesh = true
  end

  local stamesh = 'stamesh_' .. radio
  local disable_state_stamesh = false
  local stamesh_enc = config.stamesh_enc or mesh_enc
  local stamesh_psk = config.stamesh_psk or mesh_psk

  if uci:get('wireless', stamesh) then
    disable_state_stamesh = uci:get_bool('wireless', stamesh, "disabled")
    stamesh_enc = uci:get('wireless', stamesh, "encryption") or stamesh_enc
    stamesh_psk = uci:get('wireless', stamesh, "key") or stamesh_psk
  elseif config.stamesh_disabled then
    disable_state_stamesh = true
  end

  local client_ifname
  local mesh_ifname
  local stamesh_ifname
  local radio_suffix = radio:match('^radio(%d+)$')
  if radio_suffix then
    client_ifname = 'client' .. radio_suffix
    mesh_ifname = 'mesh' .. radio_suffix
    stamesh_ifname = 'stamesh' .. radio_suffix
  end

  uci:delete('wireless', client)
  uci:section('wireless', 'wifi-iface', client,
	      {
		device = radio,
		network = 'client',
		mode = 'ap',
		ssid = config.ssid,
		macaddr = util.generate_mac(2, index),
		ifname = client_ifname,
		disabled = disable_state_client and 1 or 0,
	      }
  )

  uci:delete('network', mesh)
  uci:delete('network', mesh .. '_vlan')

  if config.mesh_vlan then
	uci:section('network', 'interface', mesh,
	      {
		proto = 'none',
	      }
	)
	uci:section('network', 'interface', mesh .. '_vlan',
	      {
		ifname = '@' .. mesh .. '.' .. config.mesh_vlan,
		proto = 'batadv',
		mesh = 'bat0',
	      }
	)
  else
	uci:section('network', 'interface', mesh,
	      {
		proto = 'batadv',
		mesh = 'bat0',
	      }
	)
  end

  uci:delete('wireless', mesh)
  uci:section('wireless', 'wifi-iface', mesh,
	      {
		device = radio,
		network = mesh,
		mode = 'adhoc',
		ssid = config.mesh_ssid,
		bssid = config.mesh_bssid,
		encryption = mesh_enc,
		key = mesh_key,
		macaddr = util.generate_mac(3, index),
		mcast_rate = config.mesh_mcast_rate,
		ifname = mesh_ifname,
		disabled = disable_state_mesh and 1 or 0,
	      }
  )

  uci:delete('network', stamesh)
  uci:delete('network', stamesh .. '_vlan')
  uci:delete('wireless', stamesh)

  if config.stamesh_ssid then
	  if config.mesh_vlan then
		uci:section('network', 'interface', stamesh,
		      {
			proto = 'none',
		      }
		)
		uci:section('network', 'interface', stamesh .. '_vlan',
		      {
			ifname = '@' .. stamesh .. '.' .. config.mesh_vlan,
			proto = 'batadv',
			mesh = 'bat0',
		      }
		)
	  else
		uci:section('network', 'interface', stamesh,
		      {
			proto = 'batadv',
			mesh = 'bat0',
		      }
		)
	  end

	  uci:section('wireless', 'wifi-iface', stamesh,
		      {
			device = radio,
			network = stamesh,
			mode = 'sta',
			ssid = config.stamesh_ssid,
			encryption = stamesh_enc,
			key = stamesh_psk,
			macaddr = util.generate_mac(4, index),
			mcast_rate = config.mesh_mcast_rate,
			ifname = stamesh_ifname,
			disabled = disable_state_stamesh and 1 or 0,
		      }
	  )
  end
end


local radios = {}

uci:foreach('wireless', 'wifi-device',
	    function(s)
	      table.insert(radios, s['.name'])
	    end
)

for index, radio in ipairs(radios) do
	local hwmode = uci:get('wireless', radio, 'hwmode')

	if hwmode == '11g' or hwmode == '11ng' then
	  configure_radio(radio, index, site.wifi24)
	elseif hwmode == '11a' or hwmode == '11na' then
	  configure_radio(radio, index, site.wifi5)
	end
end


uci:save('wireless')
uci:save('network')
uci:commit('wireless')
uci:commit('network')
